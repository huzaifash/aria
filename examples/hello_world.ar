main :: fn u8 {
	std.get_stdout().write("hello");
	std.get_stderr().write("this is an example errorneous string");
}

std :: mod {
	writer :: trait {
		write :: fn (bytes: u8[]) result<u64, error>;
	}

	stdout :: struct;
	impl writer for stdout {
		write :: fn (bytes: u8[]) result<u64, error> {
			syscall.write(STDOUT_FILENO, bytes, bytes.len);
		}
	}

	stderr :: struct;
	impl writer for stderr {
		write :: fn (bytes: u8[]) result<u64, error> {
			syscall.write(STDERR_FILENO, bytes, bytes.len);
		}
	}

	syscall :: mod {
		write :: extern fn (file: FILE*, bytes: u8*, len: u64);
	}
}
