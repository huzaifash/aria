<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=Edge">
<meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Chrome, Firefox OS and Opera -->
<meta name="theme-color" content="#0F0F0F">
<!-- Windows Phone -->
<meta name="msapplication-navbutton-color" content="#0F0F0F">
<!-- iOS Safari -->
<meta name="apple-mobile-web-app-status-bar-style" content="#0F0F0F">

<title>The Aria Programming Language</title>

<link rel="stylesheet" href="style.css">
<link rel="icon" href="assets/favicon.ico" type="image/x-icon">
</head>

<body>
<article>
<main>

<img style="margin-top: 0px;" src="assets/aria-banner-dark-white.png" class="banner">
<blockquote>The Aria Programming Language </blockquote>

<h2 class="subtitle">An open-source high-performance programming
language & toolkit.</h2>

<h2>Table Of Contents</h2>
<ul style="font-style: italic">
<li><a href="#a_hello_world_program">A Hello World Program</a></li>
<li><a href="#comments">Comments</a></li>
<li><a href="#variables">Variables</a></li>
</ul>

<h2>A Hello World Program</h2><a name="a_hello_world_program"></a>

<div class="code"><pre>
@hello_world.ar
</pre></div>
<span class="code-path">main.ar</span>

<p>The first line is a compiler directive: it tells the compiler to import
the standard library into the program's scope. All directives start with a
<code>#</code>. Note that the <code>std</code> may or may not be in the
directory of the source file: see TODO for more details.</p>

<p>The third line is a function definition. Here, a <code>main</code>
function is defined to return an unsigned 8-bit integer (<code>u8</code>)
and is visible to the linker using the <code>pub</code> keyword.</p>

<p class="last">The very next line is a function call. It uses the <code>println</code>
function from the standard library to print "Hello, world" onto the console.
Note that the <code>println</code> function is a <em>variadic</em>
function—it takes a format argument and a variable number of arguments of
any<sup>1</sup> type—and prints them to the console. The <code>{}</code>
next to <code>Hello</code> signify the argument location inside the string.
Also note that the format parameter must be a compile-time string literal:
the compiler checks the format argument at compile-time and throw errors if
there is an argument-count mismatch.</p>

<div class="footer last"> <hr/>
<sup>1</sup> <code>println</code> uses traits to determine if any given
argument can be stringified. More on traits <a href="#">here</a>. So "any"
in this context is being considerate.<hr/></div>

<h2>Comments</h2><a name="comments"></a>

<div class="code"><pre>
@comments.ar
</pre></div>
<span class="code-path">comments.ar</span>

<h2>Variables</h2><a name="variables"></a>
<p>From now on, only contextual snippets of code will be shown—implied
code will be omitted (like <code>pub main :: fn u8 {</code> or
<code>#import &lt;std&gt;</code>).</p>

<p class="inline">A variable is declared and initialized like this:
<div class="code"><pre>
preproc_time :: 6.20;</pre></div></p>

<p class="inline">A variable declaration without an initializer will require a type
annotation:
<div class="code"><pre>
preproc_time: f32;</pre></div></p>

<p class="inline">Or it can combine both:
<div class="inline code"><pre>
preproc_time: f32: 6.20;</pre></div></p>

</main>
</article>
</body>
</html>
